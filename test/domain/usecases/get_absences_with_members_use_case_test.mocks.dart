// Mocks generated by Mockito 5.4.5 from annotations
// in absence_manager/test/domain/usecases/get_absences_with_members_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:absence_manager/data/repositories/absence/absence_repository.dart'
    as _i2;
import 'package:absence_manager/data/repositories/member/member_repository.dart'
    as _i5;
import 'package:absence_manager/domain/models/absence/absence.dart' as _i4;
import 'package:absence_manager/domain/models/member/member.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AbsenceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbsenceRepository extends _i1.Mock implements _i2.AbsenceRepository {
  MockAbsenceRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Absence>> getAllAbsences({
    required int? offset,
    required int? limit,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getAllAbsences, [], {
              #offset: offset,
              #limit: limit,
            }),
            returnValue: _i3.Future<List<_i4.Absence>>.value(<_i4.Absence>[]),
          )
          as _i3.Future<List<_i4.Absence>>);
}

/// A class which mocks [MemberRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMemberRepository extends _i1.Mock implements _i5.MemberRepository {
  MockMemberRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i6.Member>> getAllMembers() =>
      (super.noSuchMethod(
            Invocation.method(#getAllMembers, []),
            returnValue: _i3.Future<List<_i6.Member>>.value(<_i6.Member>[]),
          )
          as _i3.Future<List<_i6.Member>>);
}
